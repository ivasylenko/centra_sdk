# generated by fastapi-codegen:
#   filename:  connector
#   timestamp: 2025-07-29T18:35:05+00:00

from __future__ import annotations

from abc import ABC, abstractmethod
from typing import Optional, Union
from uuid import UUID

from fastapi import APIRouter
from fastapi.responses import JSONResponse
from pydantic import conint

from ..dependencies import *
from ..models.connector.v1.common.inventory import InventoryItem
from ..models.connector.v1.consumer.agents import AgentsInfo
from ..models.connector.v1.consumer.enforcement import (
    Action,
    EnforcementPolicy,
    EnforcementPolicyInventory,
)
from ..models.connector.v1.operations.config import (
    InternalConfig,
    InternalConfigMetadata,
)
from ..models.connector.v1.operations.health import (
    V1OperationsFlagsGetResponse,
    V1OperationsHealthGetResponse,
    V1OperationsMetricsGetResponse,
)
from ..models.connector.v1.operations.info import EnvUnits, IntegrationEnvInfo
from ..models.connector.v1.operations.log import LogStart, LogStatus
from ..models.connector.v1.operations.onboard import (
    Onboard,
    StatusRequest,
    StatusResponse,
)
from ..models.connector.v1.provider.inventory import (
    Inventory,
    InventoryAssetType,
    InventoryReporterType,
    Labels,
    NetworkTopology,
    V1ProviderInventoryIdAssetsAssetTypePostResponse,
    V1ProviderInventoryIdAssetsAssetTypePostResponse1,
)
from ..models.connector.v1.provider.lookup import LookupRequest
from ..models.connector.version import VersionHandshakeData

router = APIRouter(tags=['Control'])


class ControlAPIController(ABC):
    def __init__(self):
        pass

    @abstractmethod
    def version_hanshake_handler(
        self, body: VersionHandshakeData
    ) -> VersionHandshakeData:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @router.post(
        '/version-handshake', response_model=VersionHandshakeData, tags=['Control']
    )
    def version_hanshake(self, body: VersionHandshakeData) -> VersionHandshakeData:
        """
        Perform version handshake
        """
        return self.version_hanshake_handler(body)
