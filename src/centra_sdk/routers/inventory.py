# generated by fastapi-codegen:
#   filename:  connector
#   timestamp: 2025-07-29T18:35:05+00:00

from __future__ import annotations

from abc import ABC, abstractmethod
from typing import Optional, Union
from uuid import UUID

from fastapi import APIRouter
from fastapi.responses import JSONResponse
from pydantic import conint

from ..dependencies import *
from ..models.connector.v1.common.inventory import InventoryItem
from ..models.connector.v1.consumer.agents import AgentsInfo
from ..models.connector.v1.consumer.enforcement import (
    Action,
    EnforcementPolicy,
    EnforcementPolicyInventory,
)
from ..models.connector.v1.operations.config import (
    InternalConfig,
    InternalConfigMetadata,
)
from ..models.connector.v1.operations.health import (
    V1OperationsFlagsGetResponse,
    V1OperationsHealthGetResponse,
    V1OperationsMetricsGetResponse,
)
from ..models.connector.v1.operations.info import EnvUnits, IntegrationEnvInfo
from ..models.connector.v1.operations.log import LogStart, LogStatus
from ..models.connector.v1.operations.onboard import (
    Onboard,
    StatusRequest,
    StatusResponse,
)
from ..models.connector.v1.provider.inventory import (
    Inventory,
    InventoryAssetType,
    InventoryReporterType,
    Labels,
    NetworkTopology,
    V1ProviderInventoryIdAssetsAssetTypePostResponse,
    V1ProviderInventoryIdAssetsAssetTypePostResponse1,
)
from ..models.connector.v1.provider.lookup import LookupRequest
from ..models.connector.version import VersionHandshakeData

router = APIRouter(tags=['Inventory'])


class InventoryAPIController(ABC):
    def __init__(self):
        pass

    @abstractmethod
    def set_agent_info_handler(self, body: AgentsInfo) -> None:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def update_agent_info_handler(self, body: AgentsInfo) -> None:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def get_labels_handler(
        self,
        cursor: Optional[conint(ge=0)] = 0,
        page_size: Optional[conint(ge=1, le=1000)] = 100,
    ) -> Labels:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def get_inventory_handler(
        self,
        cursor: Optional[conint(ge=0)] = 0,
        page_size: Optional[conint(ge=1, le=1000)] = 100,
    ) -> Inventory:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def push_inventory_of_type_handler(
        self,
        id: str,
        asset_type: InventoryAssetType = ...,
        revision: int = ...,
        reporter: Optional[InventoryReporterType] = None,
        body: Inventory = ...,
    ) -> V1ProviderInventoryIdAssetsAssetTypePostResponse:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def get_asset_id_handler(self, body: LookupRequest) -> InventoryItem:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def get_network_topology_handler(
        self,
        cursor: Optional[conint(ge=0)] = 0,
        page_size: Optional[conint(ge=1, le=1000)] = 100,
    ) -> NetworkTopology:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @router.post('/v1/consumer/agents-info', response_model=None, tags=['Inventory'])
    def set_agent_info(self, body: AgentsInfo) -> None:
        """
        Report info about Centra agents, overrides any previous provided data
        """
        return self.set_agent_info_handler(body)

    @router.put('/v1/consumer/agents-info', response_model=None, tags=['Inventory'])
    def update_agent_info(self, body: AgentsInfo) -> None:
        """
        Report Centra agents info, in addition to the already provided data
        """
        return self.update_agent_info_handler(body)

    @router.get('/v1/provider/import-labels', response_model=Labels, tags=['Inventory'])
    def get_labels(
        self,
        cursor: Optional[conint(ge=0)] = 0,
        page_size: Optional[conint(ge=1, le=1000)] = 100,
    ) -> Labels:
        """
        Get connector environment labels (with pagination)
        """
        return self.get_labels_handler(cursor, page_size)

    @router.get('/v1/provider/inventory', response_model=Inventory, tags=['Inventory'])
    def get_inventory(
        self,
        cursor: Optional[conint(ge=0)] = 0,
        page_size: Optional[conint(ge=1, le=1000)] = 100,
    ) -> Inventory:
        """
        Retrieve the entire inventory
        """
        return self.get_inventory_handler(cursor, page_size)

    @router.post(
        '/v1/provider/inventory/{id}/assets/{asset_type}',
        response_model=V1ProviderInventoryIdAssetsAssetTypePostResponse,
        responses={'412': {'model': V1ProviderInventoryIdAssetsAssetTypePostResponse1}},
        tags=['Inventory'],
    )
    def push_inventory_of_type(
        self,
        id: str,
        asset_type: InventoryAssetType = ...,
        revision: int = ...,
        reporter: Optional[InventoryReporterType] = None,
        body: Inventory = ...,
    ) -> Union[
        V1ProviderInventoryIdAssetsAssetTypePostResponse,
        V1ProviderInventoryIdAssetsAssetTypePostResponse1,
    ]:
        """
        Report inventory for assets of type 'aset-type'
        """
        return self.push_inventory_of_type_handler(
            id, asset_type, revision, reporter, body
        )

    @router.post(
        '/v1/provider/lookup', response_model=InventoryItem, tags=['Inventory']
    )
    def get_asset_id(self, body: LookupRequest) -> InventoryItem:
        """
        Retrieve the asset id of the destination side.
        """
        return self.get_asset_id_handler(body)

    @router.get(
        '/v1/provider/topology', response_model=NetworkTopology, tags=['Inventory']
    )
    def get_network_topology(
        self,
        cursor: Optional[conint(ge=0)] = 0,
        page_size: Optional[conint(ge=1, le=1000)] = 100,
    ) -> NetworkTopology:
        """
        Retrieve network topology information
        """
        return self.get_network_topology_handler(cursor, page_size)
