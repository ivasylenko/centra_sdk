# generated by fastapi-codegen:
#   filename:  connector
#   timestamp: 2025-07-29T18:35:05+00:00

from __future__ import annotations

from abc import ABC, abstractmethod
from typing import Optional, Union
from uuid import UUID

from fastapi import APIRouter
from fastapi.responses import JSONResponse
from pydantic import conint

from ..dependencies import *
from ..models.connector.v1.common.inventory import InventoryItem
from ..models.connector.v1.consumer.agents import AgentsInfo
from ..models.connector.v1.consumer.enforcement import (
    Action,
    EnforcementPolicy,
    EnforcementPolicyInventory,
)
from ..models.connector.v1.operations.config import (
    InternalConfig,
    InternalConfigMetadata,
)
from ..models.connector.v1.operations.health import (
    V1OperationsFlagsGetResponse,
    V1OperationsHealthGetResponse,
    V1OperationsMetricsGetResponse,
)
from ..models.connector.v1.operations.info import EnvUnits, IntegrationEnvInfo
from ..models.connector.v1.operations.log import LogStart, LogStatus
from ..models.connector.v1.operations.onboard import (
    Onboard,
    StatusRequest,
    StatusResponse,
)
from ..models.connector.v1.provider.inventory import (
    Inventory,
    InventoryAssetType,
    InventoryReporterType,
    Labels,
    NetworkTopology,
    V1ProviderInventoryIdAssetsAssetTypePostResponse,
    V1ProviderInventoryIdAssetsAssetTypePostResponse1,
)
from ..models.connector.v1.provider.lookup import LookupRequest
from ..models.connector.version import VersionHandshakeData

router = APIRouter(tags=['Operations'])


class OperationsAPIController(ABC):
    def __init__(self):
        pass

    @abstractmethod
    def get_integration_details_handler(
        self,
    ) -> IntegrationEnvInfo:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def get_integration_units_details_handler(
        self,
        cursor: Optional[conint(ge=0)] = 0,
        page_size: Optional[conint(ge=1, le=1000)] = 100,
    ) -> EnvUnits:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def get_integration_flags_handler(
        self,
    ) -> V1OperationsFlagsGetResponse:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def get_integration_status_handler(
        self,
    ) -> V1OperationsHealthGetResponse:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def get_integration_configuration_options_handler(
        self,
    ) -> InternalConfigMetadata:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def set_integration_configuration_handler(self, body: InternalConfig) -> None:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def get_logs_handler(self, id: Optional[UUID] = None) -> bytes:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def start_logging_handler(self, body: LogStart) -> None:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def get_logging_status_handler(self, id: Optional[UUID] = None) -> LogStatus:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def stop_logging_handler(self, id: Optional[UUID] = None) -> None:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def get_integration_metrics_handler(
        self,
    ) -> V1OperationsMetricsGetResponse:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def on_board_handler(self, body: Onboard) -> None:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @abstractmethod
    def get_on_boarding_status_handler(self, body: StatusRequest) -> StatusResponse:
        """This method should be implemented by the subclass."""
        return JSONResponse(status_code=404)

    @router.get(
        '/v1/operations/env-info',
        response_model=IntegrationEnvInfo,
        tags=['Operations'],
    )
    def get_integration_details(
        self,
    ) -> IntegrationEnvInfo:
        """
        Endpoint to retrieve integration environment details. Should fit in one response page.
        """
        return self.get_integration_details_handler()

    @router.get(
        '/v1/operations/env-units-list', response_model=EnvUnits, tags=['Operations']
    )
    def get_integration_units_details(
        self,
        cursor: Optional[conint(ge=0)] = 0,
        page_size: Optional[conint(ge=1, le=1000)] = 100,
    ) -> EnvUnits:
        """
        Endpoint to retrieve integration environment logical units details. This endpoint support pagination for big amount of units
        """
        return self.get_integration_units_details_handler(cursor, page_size)

    @router.get(
        '/v1/operations/flags',
        response_model=V1OperationsFlagsGetResponse,
        tags=['Operations'],
    )
    def get_integration_flags(
        self,
    ) -> V1OperationsFlagsGetResponse:
        """
        Endpoint to retrieve components flags
        """
        return self.get_integration_flags_handler()

    @router.get(
        '/v1/operations/health',
        response_model=V1OperationsHealthGetResponse,
        tags=['Operations'],
    )
    def get_integration_status(
        self,
    ) -> V1OperationsHealthGetResponse:
        """
        Endpoint to retrieve components status
        """
        return self.get_integration_status_handler()

    @router.get(
        '/v1/operations/internal/config_metadata',
        response_model=InternalConfigMetadata,
        tags=['Operations'],
    )
    def get_integration_configuration_options(
        self,
    ) -> InternalConfigMetadata:
        """
        Endpoint to retrieve internal configuration options
        """
        return self.get_integration_configuration_options_handler()

    @router.post(
        '/v1/operations/internal/internal_config',
        response_model=None,
        tags=['Operations'],
    )
    def set_integration_configuration(self, body: InternalConfig) -> None:
        """
        Endpoint to set internal services configuration
        """
        return self.set_integration_configuration_handler(body)

    @router.get(
        '/v1/operations/log/download', response_model=bytes, tags=['Operations']
    )
    def get_logs(self, id: Optional[UUID] = None) -> bytes:
        """
        Endpoint to retrieve component logs
        """
        return self.get_logs_handler(id)

    @router.post('/v1/operations/log/start', response_model=None, tags=['Operations'])
    def start_logging(self, body: LogStart) -> None:
        """
        Endpoint for instructing component to gather logs
        """
        return self.start_logging_handler(body)

    @router.get(
        '/v1/operations/log/status', response_model=LogStatus, tags=['Operations']
    )
    def get_logging_status(self, id: Optional[UUID] = None) -> LogStatus:
        """
        Endpoint to query component on logs gathering status
        """
        return self.get_logging_status_handler(id)

    @router.get('/v1/operations/log/stop', response_model=None, tags=['Operations'])
    def stop_logging(self, id: Optional[UUID] = None) -> None:
        """
        Endpoint to abort logs gathering
        """
        return self.stop_logging_handler(id)

    @router.get(
        '/v1/operations/metrics',
        response_model=V1OperationsMetricsGetResponse,
        tags=['Operations'],
    )
    def get_integration_metrics(
        self,
    ) -> V1OperationsMetricsGetResponse:
        """
        Endpoint to retrieve components metrics
        """
        return self.get_integration_metrics_handler()

    @router.post('/v1/operations/onboarding', response_model=None, tags=['Operations'])
    def on_board(self, body: Onboard) -> None:
        """
        Endpoint to onboard connector
        """
        return self.on_board_handler(body)

    @router.post(
        '/v1/operations/status', response_model=StatusResponse, tags=['Operations']
    )
    def get_on_boarding_status(self, body: StatusRequest) -> StatusResponse:
        """
        Endpoint to get onboarding status
        """
        return self.get_on_boarding_status_handler(body)
