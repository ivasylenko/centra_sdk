# generated by fastapi-codegen:
#   filename:  connector
#   timestamp: 2025-07-30T11:37:45+00:00

from __future__ import annotations

from abc import ABC, abstractmethod

from fastapi import APIRouter, HTTPException

from ..dependencies import *
from ..handler_registry import call_handler

router = APIRouter(tags=['Operations'])


class OperationsHandler(ABC):
    def __init__(self):
        pass

    @abstractmethod
    def get_integration_details(
        self,
    ) -> IntegrationEnvInfo:
        """This method should be implemented by the subclass."""
        raise HTTPException(
            status_code=404, detail=f"get_integration_details not implemented"
        )

    @abstractmethod
    def get_integration_units_details(
        self,
        cursor: Optional[conint(ge=0)] = 0,
        page_size: Optional[conint(ge=1, le=1000)] = 100,
    ) -> EnvUnits:
        """This method should be implemented by the subclass."""
        raise HTTPException(
            status_code=404, detail=f"get_integration_units_details not implemented"
        )

    @abstractmethod
    def get_integration_flags(
        self,
    ) -> V1OperationsFlagsGetResponse:
        """This method should be implemented by the subclass."""
        raise HTTPException(
            status_code=404, detail=f"get_integration_flags not implemented"
        )

    @abstractmethod
    def get_integration_status(
        self,
    ) -> V1OperationsHealthGetResponse:
        """This method should be implemented by the subclass."""
        raise HTTPException(
            status_code=404, detail=f"get_integration_status not implemented"
        )

    @abstractmethod
    def get_integration_configuration_options(
        self,
    ) -> InternalConfigMetadata:
        """This method should be implemented by the subclass."""
        raise HTTPException(
            status_code=404,
            detail=f"get_integration_configuration_options not implemented",
        )

    @abstractmethod
    def set_integration_configuration(self, body: InternalConfig) -> None:
        """This method should be implemented by the subclass."""
        raise HTTPException(
            status_code=404, detail=f"set_integration_configuration not implemented"
        )

    @abstractmethod
    def get_logs(self, id: Optional[UUID] = None) -> bytes:
        """This method should be implemented by the subclass."""
        raise HTTPException(status_code=404, detail=f"get_logs not implemented")

    @abstractmethod
    def start_logging(self, body: LogStart) -> None:
        """This method should be implemented by the subclass."""
        raise HTTPException(status_code=404, detail=f"start_logging not implemented")

    @abstractmethod
    def get_logging_status(self, id: Optional[UUID] = None) -> LogStatus:
        """This method should be implemented by the subclass."""
        raise HTTPException(
            status_code=404, detail=f"get_logging_status not implemented"
        )

    @abstractmethod
    def stop_logging(self, id: Optional[UUID] = None) -> None:
        """This method should be implemented by the subclass."""
        raise HTTPException(status_code=404, detail=f"stop_logging not implemented")

    @abstractmethod
    def get_integration_metrics(
        self,
    ) -> V1OperationsMetricsGetResponse:
        """This method should be implemented by the subclass."""
        raise HTTPException(
            status_code=404, detail=f"get_integration_metrics not implemented"
        )

    @abstractmethod
    def on_board(self, body: Onboard) -> None:
        """This method should be implemented by the subclass."""
        raise HTTPException(status_code=404, detail=f"on_board not implemented")

    @abstractmethod
    def get_on_boarding_status(self, body: StatusRequest) -> StatusResponse:
        """This method should be implemented by the subclass."""
        raise HTTPException(
            status_code=404, detail=f"get_on_boarding_status not implemented"
        )


@router.get(
    '/v1/operations/env-info', response_model=IntegrationEnvInfo, tags=['Operations']
)
def get_integration_details() -> IntegrationEnvInfo:
    """
    Endpoint to retrieve integration environment details. Should fit in one response page.
    """
    return call_handler(
        'Operations',
        get_integration_details.__name__,
    )


@router.get(
    '/v1/operations/env-units-list', response_model=EnvUnits, tags=['Operations']
)
def get_integration_units_details(
    cursor: Optional[conint(ge=0)] = 0, page_size: Optional[conint(ge=1, le=1000)] = 100
) -> EnvUnits:
    """
    Endpoint to retrieve integration environment logical units details. This endpoint support pagination for big amount of units
    """
    return call_handler(
        'Operations', get_integration_units_details.__name__, cursor, page_size
    )


@router.get(
    '/v1/operations/flags',
    response_model=V1OperationsFlagsGetResponse,
    tags=['Operations'],
)
def get_integration_flags() -> V1OperationsFlagsGetResponse:
    """
    Endpoint to retrieve components flags
    """
    return call_handler(
        'Operations',
        get_integration_flags.__name__,
    )


@router.get(
    '/v1/operations/health',
    response_model=V1OperationsHealthGetResponse,
    tags=['Operations'],
)
def get_integration_status() -> V1OperationsHealthGetResponse:
    """
    Endpoint to retrieve components status
    """
    return call_handler(
        'Operations',
        get_integration_status.__name__,
    )


@router.get(
    '/v1/operations/internal/config_metadata',
    response_model=InternalConfigMetadata,
    tags=['Operations'],
)
def get_integration_configuration_options() -> InternalConfigMetadata:
    """
    Endpoint to retrieve internal configuration options
    """
    return call_handler(
        'Operations',
        get_integration_configuration_options.__name__,
    )


@router.post(
    '/v1/operations/internal/internal_config', response_model=None, tags=['Operations']
)
def set_integration_configuration(body: InternalConfig) -> None:
    """
    Endpoint to set internal services configuration
    """
    return call_handler('Operations', set_integration_configuration.__name__, body)


@router.get('/v1/operations/log/download', response_model=bytes, tags=['Operations'])
def get_logs(id: Optional[UUID] = None) -> bytes:
    """
    Endpoint to retrieve component logs
    """
    return call_handler('Operations', get_logs.__name__, id)


@router.post('/v1/operations/log/start', response_model=None, tags=['Operations'])
def start_logging(body: LogStart) -> None:
    """
    Endpoint for instructing component to gather logs
    """
    return call_handler('Operations', start_logging.__name__, body)


@router.get('/v1/operations/log/status', response_model=LogStatus, tags=['Operations'])
def get_logging_status(id: Optional[UUID] = None) -> LogStatus:
    """
    Endpoint to query component on logs gathering status
    """
    return call_handler('Operations', get_logging_status.__name__, id)


@router.get('/v1/operations/log/stop', response_model=None, tags=['Operations'])
def stop_logging(id: Optional[UUID] = None) -> None:
    """
    Endpoint to abort logs gathering
    """
    return call_handler('Operations', stop_logging.__name__, id)


@router.get(
    '/v1/operations/metrics',
    response_model=V1OperationsMetricsGetResponse,
    tags=['Operations'],
)
def get_integration_metrics() -> V1OperationsMetricsGetResponse:
    """
    Endpoint to retrieve components metrics
    """
    return call_handler(
        'Operations',
        get_integration_metrics.__name__,
    )


@router.post('/v1/operations/onboarding', response_model=None, tags=['Operations'])
def on_board(body: Onboard) -> None:
    """
    Endpoint to onboard connector
    """
    return call_handler('Operations', on_board.__name__, body)


@router.post(
    '/v1/operations/status', response_model=StatusResponse, tags=['Operations']
)
def get_on_boarding_status(body: StatusRequest) -> StatusResponse:
    """
    Endpoint to get onboarding status
    """
    return call_handler('Operations', get_on_boarding_status.__name__, body)
